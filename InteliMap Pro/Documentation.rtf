{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue255;\red0\green128\blue0;\red43\green145\blue175;
}
{\*\expandedcolortbl;;\csgenericrgb\c0\c0\c100000;\csgenericrgb\c0\c50196\c0;\csgenericrgb\c16863\c56863\c68627;
}
\vieww16800\viewh11900\viewkind0
\deftab720
\pard\pardeftab720\sl276\slmult1\sa200\partightenfactor0

\f0\b\fs44 \cf0 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\
 This asset was shared by https://unityassetcollection.com\
 Contact us:\
 - Email: unityassetcollection@gmail.com\
 - Telegram: @assetcollection or https://t.me/assetcollection						\
 If you find this package helpful and want to support us. 	\
 Please go to https://tinyurl.com/d0nat10n			\
 We really appreciate your help.				\
 Thank you.	\
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\
\pard\pardeftab720\sl276\slmult1\sa200\qc\partightenfactor0
\cf0 \ul \ulc0 \
\pard\pardeftab720\sl276\slmult1\qc\partightenfactor0

\fs96 \cf0 \ulc0 InteliMap PRO\
Offline Documentation\
\pard\pardeftab720\sl276\slmult1\sa200\qr\partightenfactor0

\f1\b0\fs28 \cf0 \ulnone Documentation Version: 1.0.3\
Created By: Tigpan (aka Timothy Letkeman)\
\
\
\pard\pardeftab720\sl276\slmult1\sa200\qc\partightenfactor0

\f0\b\fs40 \cf0 \ul \ulc0 Link to the online web-based documentation:
\f1\b0 \ulnone  {\field{\*\fldinst{HYPERLINK "https://tigpan.com/documentation/intelimap-pro"}}{\fldrslt https://tigpan.com/documentation/intelimap-pro}}\
\
\pard\pardeftab720\sl276\slmult1\sa200\qr\partightenfactor0

\f0\b\fs44 \cf0 \ul \ulc0 \
\pard\pardeftab720\sl276\slmult1\sa200\partightenfactor0

\fs40 \cf0 \ulc0 Table of contents: 
\f1\b0\fs24 \uc0\u8232 \ulnone 	1. Description\uc0\u8232 	2. Links\u8232 		2.1. Guides\u8232 		2.2. Trailers\u8232 	3. Getting Started\u8232 	4. Runtime Generation\u8232 		4.1. On Start\u8232 		4.2. How to Create Custom Runtime Behaviour\u8232 	5. Tips and Tricks\u8232 		5.1. How to Maximize Speed\u8232 		5.2. How to Pick Builder Settings\u8232 			5.2.1. Advanced Generator Settings\u8232 			5.2.2. Advanced Training Settings\u8232 		5.3. How to Pick Generator Settings\u8232 		5.4. Training and Retraining a Generator\u8232 		5.5. Using a Prefab as a Tile\u8232 		5.6. Using the Random Tile\u8232 	6. Script Reference\u8232 		6.1. Important Objects\u8232 			6.1.1. InteliMapBuilder \u8232 			6.1.2. InteliMapGenerator \u8232 		6.2. Side Objects\u8232 			6.2.1. GeneratorBuildResult\u8232 			6.2.2. DirectionalBools\u8232 			6.2.3. GeneratorMap\u8232 			6.2.4. GeneratorAdvanced\u8232 			6.2.5. TrainingAdvanced\u8232 			6.2.6. Connectivity\u8232 	7. Contact Information\
\
\

\f0\b\fs40 \ul 1. Description:
\f1\b0\fs24 \ulnone \
InteliMap PRO is 
\f0\b the tool for you 
\f1\b0 to use if you are looking to improve your 2D map design workflow, or if you want to create stunning AI generated tilemaps. It's main features are editor tools for you 
\f0\b to easily and quickly create entire environments that look handcrafted
\f1\b0 , it also includes tools for highly performant runtime generation.\
InteliMap PRO is the successor to InteliMap AI Tilemap Generator. Now with massively improved build times and many new features!\
InteliMap PRO supports any 2D tilemap, allowing you to simply use any tilemap you desire and start creating quicky, 
\f0\b no coding required! 
\f1\b0 Designed to be as simple and hassle-free as possible, this is sure to save you countless hours of work.\
Try out a 
\f0\b free game made with InteliMap PRO
\f1\b0 : {\field{\*\fldinst{HYPERLINK "https://tigpan.itch.io/potion-panic"}}{\fldrslt https://tigpan.itch.io/potion-panic}}
\f0\b \
\pard\pardeftab720\sl276\slmult1\partightenfactor0
\cf0 Features
\f1\b0 :\
\pard\pardeftab720\li720\fi-360\sl276\slmult1\partightenfactor0
\cf0 Editor tools for you to 
\f0\b quickly create vast environments in as little as one click!
\f1\b0 \
Generate detailed levels at 
\f0\b runtime
\f1\b0 .\
Supports single-layered and 
\f0\b multi-layered tilemaps!
\f1\b0 \
Supports 
\f0\b rectangular, isometric, and hexagonal tilemaps!\

\f1\b0 Integrates seamlessly with Unity's Tilemaps, no external tools nessesary!\

\f0\b Tons of customizable features 
\f1\b0 to finely tune your generation to exactly your needs.\
Includes detailed documentation and video tutorials.\
Incredibly simple to use API for easily creating your own runtime behaviours.\

\f0\b Full source code included
\f1\b0 .\
Includes 8 example scenes complete with unique tilemaps and tilesets.\
\pard\pardeftab720\sl276\slmult1\qj\partightenfactor0
\cf0 \uc0\u8232 
\f0\b PRO Features
\f1\b0 :\
\pard\pardeftab720\li720\fi-360\sl276\slmult1\partightenfactor0

\f0\b \cf0 Massively improved build speed, test at up to 32x faster!
\f1\b0 \
More streamlined building and generation process.\
Asynchronous runtime generation for no lag spikes or loading screens!\
Optional animated generation.\
Ability to use 
\f0\b any prefab as a tile!\
Even more settings and customizability!
\f1\b0 \
Completely refactored codebase for increased efficiency and stability.\
\pard\pardeftab720\sl276\slmult1\sa200\partightenfactor0
\cf0 \uc0\u8232 
\f0\b\fs40 \ul 2. Links:\uc0\u8232 \u8232 
\fs24 2.1. Guides:
\f1\b0 \ulnone  
\f0\b \ul \

\f1\b0 \ulnone 	InteliMap PRO - Quick Start Guide: {\field{\*\fldinst{HYPERLINK "https://youtu.be/EvvCwbB4x08"}}{\fldrslt https://youtu.be/EvvCwbB4x08}} \
This quick start guide is intended to get you using InteliMap PRO as quickly as possible. If you'd like to learn more please watch the advanced guide as well, thank you!\
\
	InteliMap PRO - Advanced Guide: {\field{\*\fldinst{HYPERLINK "https://youtu.be/-p-BrR4N10o"}}{\fldrslt https://youtu.be/-p-BrR4N10o}} \
This advanced guide will teach you many tips and tricks for InteliMap PRO. It includes information on all the different settings, how to use prefabs as tiles, and how to use the API to create your own runtime generation behaviour.\uc0\u8232 \u8232 
\f0\b \ul 2.2. Trailers:
\f1\b0 \ulnone  \
	InteliMap PRO - Trailer: {\field{\*\fldinst{HYPERLINK "https://youtu.be/DUc3dknq7Sc"}}{\fldrslt https://youtu.be/DUc3dknq7Sc}} \uc0\u8232 \u8232 InteliMap PRO is a tool that allows you to create stunning AI generated tilemaps, no coding required! Up to 32x faster build times compared to the original InteliMap and now with many new features! Buy now on the Unity Asset Store!
\fs40 \

\f0\b \ul 3. Getting Started:\

\f1\b0\fs24 \ulnone InteliMap PRO works using a system of builders and generators. First an InteliMap Builder component is used to analyze some example environment, this will generate a GeneratorData scriptable object. This scriptable object can then be used with an InteliMap Generator component in order to generate tilemaps.\
To begin this process first make sure you have added a tilemap to your scene, and created an example map using a tile palette of your choice (this is done exactly the same as in vanilla Unity). Next you'll want to add an IntelliMapBuilder component to any object in your scene. Now you'll need to add the example tilemap as a build map for the builder, there are two ways to do this.\
Option 1) On the left side of the scene view there will be a tool bar. When you have selected an object with an IntelliMapBuilder component, there will a tool with a hammer icon. Simply selecting that tool and dragging a box over the example map will add that area to the builders build maps.\
Option 2) Clicking the plus icon on the build maps list will add a new build map. On the new entry you can select the map layers and bounds you would like to use. You can add multiple layers to build a multi-layered tilemap.\
After you added all your build maps, you can simply click 
\f0\b Build Generator 
\f1\b0 on the builder. This will prompt you to pick a location to save the GeneratorData scriptable object, once you select a location, the training will begin. This may take a short time, but once it is done, the generator data will be trained and ready to be used in an InteliMapGenerator component. To create that component you can simply click 
\f0\b Create Generator Component 
\f1\b0 on the builder
\f0\b . 
\f1\b0 To get started using the generator, you have three options.\
Option 1) On the left side of the scene view there will be a tool bar. When you have selected an object with an IntelliMapGenerator component, there will be a tool with a map icon. Simply selecting that tool and dragging a box over the area you would like to generate will generate in that area.\
Option 2) The InteliMapGenerator component includes a few buttons that will cause it to instantly generate at that generators boundsToFill. Change the bounds to whatever you would like, then hit the Generate button.\
Option 3) You can also generate during runtime, this can be done either on scene start, or however else you like according to your custom runtime behaviours. You can read more about runtime generation in section 4.
\f0\b \ul \
\

\f1\b0 \ulnone \

\f0\b\fs40 \ul 4. Runtime Generation:
\fs24 \
4.1. On Start:
\f1\b0 \ulnone  \
By default, InteliMapGenerator's generateOnStart property is set to true. This means that if that InteliMapGenerator component is enabled. Then upon the scene starting (MonoBehaviour.Start), the area corresponding to that components boundsToFill and areaToFill will be generated. \
\pard\pardeftab720\sl276\slmult1\sa200\partightenfactor0

\f0\b \cf0 \ul \ulc0 4.2. How to Create Custom Runtime Behaviour:
\f1\b0 \ulnone  \
If you need more functionality than just generating on start, you will need to interact with the InteliMapGenerator through a script. In this short step by step guide you will learn how to create your own custom runtime generation behaviour with InteliMap.\
\pard\pardeftab720\sl276\slmult1\sa200\partightenfactor0
\cf0 \ul \ulc0 Step 1\ulnone : First create the component you wish to use to control this runtime generation. To do this right click on the assets panel, then Create > C# Script. This script will be responsible for controlling, in this example I'll be naming this script RuntimeExample. All of InteliMaps code is under the InteliMapPro namespace, thus you must should put using InteliMapPro; at the top of your project. At the end of step one your script should look like this (extra comments have also been included):\
\pard\pardeftab720\sl276\slmult1\partightenfactor0

\fs19 \cf2 using\cf0  System.Collections;\
\cf2 using\cf0  System.Collections.Generic;\
\cf2 using\cf0  UnityEngine;\
\cf2 using\cf0  InteliMapPro; \cf3 // needed to interact with InteliMapGenerator\cf0 \
\
\cf2 public\cf0  \cf2 class\cf0  \cf4 RuntimeExample\cf0  : MonoBehaviour\
\{\
    \cf3 // Start is called before the first frame update\cf0 \
    \cf2 void\cf0  \cf2 Start\cf0 ()\
    \{\
        \
    \}\
\
    \cf3 // Update is called once per frame\cf0 \
    \cf2 void\cf0  \cf2 Update\cf0 ()\
    \{\
        \
    \}\
\}\
\pard\pardeftab720\sl276\slmult1\sa200\partightenfactor0

\fs24 \cf0 \
\pard\pardeftab720\sl276\slmult1\sa200\partightenfactor0

\fs22 \cf0 \ul \ulc0 Step 2:\ulnone  Next you'll need to be able to interact with an InteliMapGenerator. To do this add a public InteliMapGenerator variable, this will allow you to set your generator through the inspector. Now to generate you will want to call the 
\fs24 StartGenerationAsync() method of that generator (if you want seeded generation, you can use the StartGenerationAsyncWithSeed(int seed) method). The reason you should use the asynchronous version of the generation instead of the synchronous version is because the asynchronous versions are non-blocking, whereas the synchronous versions are blocking and may cause a lag spike if the area to fill is large enough.\
\pard\pardeftab720\sl276\slmult1\partightenfactor0

\fs19 \cf2 using\cf0  System.Collections;\
\cf2 using\cf0  System.Collections.Generic;\
\cf2 using\cf0  UnityEngine;\
\cf2 using\cf0  InteliMapPro; \cf3 // needed to interact with InteliMapGenerator\cf0 \
\
\cf2 public\cf0  \cf2 class\cf0  \cf4 RuntimeExample\cf0  : MonoBehaviour\
\{\
    \cf2 public\cf0  InteliMapGenerator generator; \cf3 // the generator to use for runtime generation\cf0 \
\
    \cf3 // Start is called before the first frame update\cf0 \
    \cf2 void\cf0  \cf2 Start\cf0 ()\
    \{\
        generator.StartGeneration(); \cf3 // starts the generator upon Start\cf0 \
        \cf3 // generator.StartGenerationAsyncWithSeed(1234); // also for generating with a seed\cf0 \
    \}\
\
    \cf3 // Update is called once per frame\cf0 \
    \cf2 void\cf0  \cf2 Update\cf0 ()\
    \{\
        \
    \}\
\}\
\pard\pardeftab720\sl276\slmult1\sa200\partightenfactor0

\fs22 \cf0 \
\ul Step 3:\ulnone  Now that you have the basic generation working, you can do anything you'd like with the generator by moving its boundsToFill property and then calling StartGeneration. For example, if you wanted to make a side scrolling environment, you could you could incrementally move the boundsToFill's position to the right, and then call generate. One thing to note is to make sure the bounds overlap with what is already placed, if there is no overlap then the generator will not bother to meaningfully connect the tiles and you will end up with rough boundaries between the generated areas.\
\pard\pardeftab720\sl276\slmult1\partightenfactor0

\fs19 \cf2 using\cf0  System.Collections;\
\cf2 using\cf0  System.Collections.Generic;\
\cf2 using\cf0  UnityEngine;\
\cf2 using\cf0  InteliMapPro; \cf3 // needed to interact with InteliMapGenerator\cf0 \
\
\cf2 public\cf0  \cf2 class\cf0  \cf4 RuntimeExample\cf0  : MonoBehaviour\
\{\
    \cf2 public\cf0  InteliMapGenerator generator; \cf3 // the generator to use for runtime generation\cf0 \
\
    \cf2 public\cf0  \cf2 int\cf0  chunkSize = 16;\
    \cf2 public\cf0  \cf2 float\cf0  timePerChunk = 1.0f;\
\
    \cf2 private\cf0  \cf2 float\cf0  timer = 0.0f;\
\
    \cf3 // Start is called before the first frame update\cf0 \
    \cf2 void\cf0  \cf2 Start\cf0 ()\
    \{\
        generator.StartGenerationAsync(); \cf3 // starts the generator upon Start\cf0 \
        \cf3 // generator.StartGenerationAsyncWithSeed(1234); // also for generating with a seed\cf0 \
\
        \cf3 // Set the generators bounds to fill size to match the chunk size (+1 to ensure an overlap)\cf0 \
        generator.boundsToFill.size = \cf2 new\cf0  Vector3Int(chunkSize + 1, generator.boundsToFill.size.y, generator.boundsToFill.size.z);\
    \}\
\
    \cf3 // Update is called once per frame\cf0 \
    \cf2 void\cf0  \cf2 Update\cf0 ()\
    \{\
        \cf3 // Increase the timer\cf0 \
        timer += Time.deltaTime;\
\
        \cf2 if\cf0  (timer > timePerChunk) \
        \{\
            \cf3 // Reset the timer\cf0 \
            timer = 0.0f;\
\
            \cf3 // Tell the generator to generate\cf0 \
            generator.StartGenerationAsync();\
\
            \cf3 // Move the generators position to the right\cf0 \
            generator.boundsToFill.position += \cf2 new\cf0  Vector3Int(chunkSize, 0, 0);\
        \}\
    \}\
\}
\f0\b\fs40 \ul \
\pard\pardeftab720\sl276\slmult1\sa200\partightenfactor0
\cf0 \ulc0 \
5. Tips and Tricks:\
\pard\pardeftab720\sl276\slmult1\sa200\partightenfactor0

\fs24 \cf0 \ulc0 5.1. How to Maximize Speed:
\f1\b0 \ulnone  \
	In order to maximize the speed of InteliMap, there are a few things you should keep in mind. \
	Most importantly is you should try to keep the amount of unique tiles as low as possible, this is because the machine learning model needs to make a unique prediction for each unique tile and because the time complexity algorithm used to resolve the contraints during generation is proportional to the cube of the number of unique tiles. Some things you can do keep the unique tile count low is to make sure you don't have duplicate tiles. InteliMap counts unique tiles based on the tiles that compose it, even if it may look exactly identical to another tile. \
	You should also try to keep the build maps as small as possible. It is sometimes better to split up a large build map into multiple smaller ones in order to gain speed. Note that this is only recommended when the generator does not use positional or border information as inputs, as splitting up the build map would cause it to use different inputs than intended.\
	Finally you should also use an approriate amount of training threads to build a generator. This currently defaults to 16, but it can be increased for even more performance if your machine has enough resources for all the threads. As a general rule of thumb, this value should be equal to the amount of cores on your CPU.\
\

\f0\b \ul 5.2. How to Pick Builder Settings:
\f1\b0 \ulnone  \
	The epochs value is how many times to train the generator on the build maps. For simple maps this can be as little as a few hundred to a thousand, but for more complicated maps it may need to be larger than that.\
	One of the most important settings of the builder is the neighborhood radius. This is the radius around a tile that can influence what that tile becomes. The higher this value is, the longer building and generation may take. For most environments this should be set to around 2 or 3.\
	
\f0\b \ul 5.2.1. Advanced Generator Settings:
\f1\b0 \ulnone  \
	The advanced generator settings are what determines how the generator will behave. The connectivity of the generator is how it will enforce which tiles are allowed to be connected to each other. There are also additional settings that allow the generator to use the position of a tile relative to the bounds of generation as an input. \
	Note that for hexagonal maps, the horizontal axis actually corresponds to the y direction, and similarly the vertical axis of a hexagonal map actually corresponds to the x direction. Thus if you want the connectivity of the top and bottom of a hexagonal map enforced, you would actually need to enable the left and right settings of enforce border connectivity.\
	
\f0\b \ul 5.2.2. Advanced Training Settings:
\f1\b0 \ulnone  \
	The amount of training threads is the most important value that will determine the speed of the build. As a general rule of thumb, this value should be equal to the amount of cores on your CPU.\
	The learning rate can also highly influence the speed of the build, currently this defaults to some relatively low numbers, and thus training can be sped up by increasing these. However, increasing these too high may result in some numbers overflowing into NaN values, ruining the generator.\
\

\f0\b \ul 5.3. How to Pick Generator Settings:
\f1\b0 \ulnone  \
	There are two values on the InteliMap Generator component that can influence the behaviour of the generation. These being 
\fs19 temperature 
\fs24 and 
\fs19 randomOrder. \
\pard\pardeftab720\sl276\slmult1\sa200\partightenfactor0

\fs24 \cf0 	Temperature influences the randomness of the generator, this should be increased if the generator is producing very "bland" generation, it can also be decreased if the generator is producing undesireably wild generation. Note that this value is unclamped and can be set to as far positive or as far negative as you wish, however setting this value to extreme will impact performance. As a general rule of thumb, this value shouldn't surpass +10 or -10.\
	Random order determines what percentage of tiles will be placed completely randomly instead of being based on the confidence of the generator. If this is set to 0, then during generator, the next tile is always based off what tile the generator has the highest confidence in (this is similar to how wave function collapse works). If this is set to 1, then the generator will decide the next tile to place completely randomly. This should be increased if the generator is producing a lot of unwanted repeating patterns.\
\
\pard\pardeftab720\sl276\slmult1\sa200\partightenfactor0

\f0\b \cf0 \ul \ulc0 5.4. Training and Retraining a Generator:
\f1\b0 \ulnone  \
	After a generator data object has been created. It can continue to be trained simply by placing the object back into the InteliMap Builder, then training again. This will recompute all the connectivity data for the component and continue training the weights and parameters of the machine learning model. Note that retraining the generator will not change many of its settings such as neighborhood radius or what to use as inputs.\
	Thus, if you want to recompute the connectivity data for a generator, but don't want to modify its parameters. You can train it for 0 epochs, this will reset the connectivity but not affect the parameters.\
\pard\pardeftab720\sl276\slmult1\sa200\partightenfactor0

\f0\b\fs40 \cf0 \ul \ulc0 \
\pard\pardeftab720\sl276\slmult1\sa200\partightenfactor0

\fs24 \cf0 \ulc0 5.5. Using a Prefab as a Tile:
\f1\b0 \ulnone  \
	If you would like to use a prefab as a tile, there is a very simple way to do that. You need to create a PrefabTile instance, then when that tile is included in a build map, InteliMap will recognize it like any other tile, and when that tile is generated it will also be generated with the prefab.\
	To do this, first create a PrefabTile instance by in your project going Create > InteliMap Pro > Prefab Tile. Now that you have created a prefab tile instance, you can set the sprite and prefab variables to whatever you would like. Afterwards, you can then add that tile to a tile palette and draw with it just like you would any other tile. Note that the prefab of the tile may not be shown in the tile palette, however it will still have that prefab in the scene. InteliMap stores tiles using the TileBase class, so it will recognize anything that extends from TileBase (such as PrefabTile in this example).\
\

\f0\b \ul 5.6. Using the Random Tile:
\f1\b0 \ulnone  \
	The Random Tile is included in InteliMap PRO 1.0.3 or later. It allows you to create a tile that randomly decides, at runtime, which Sprite it should use. The choice is made from the 
\fs19 possibleSprites
\fs24  sprite array of the RandomTile. However, InteliMap will recognize this Random Tile as a single tile. Therefore, it can be used to generate multiple variations of a tile (e.g., different "grass" sprites within a single RandomTile), while being perceived as a single tile by InteliMap. Utilizing this method can help speed up both the building and generation process of InteliMap by reducing the number of unique tiles. This Random Tile can be created by right clicking on the project, then selecting Create > InteliMap Pro > Random Tile, after it has been created it can be placed into a tile palette and used like any other tile.
\f0\b\fs40 \ul \
\
\
6. Script Reference:\uc0\u8232 
\f1\b0 \ulnone \uc0\u8232 	
\fs24 All the code for InteliMap PRO is under the 
\fs19 InteliMapPro 
\fs24 namespace.
\f0\b \ul \uc0\u8232 \u8232 6.1. Important Objects:\
\pard\pardeftab720\sl276\slmult1\sa200\partightenfactor0

\f1\b0\fs22 \cf0 \ulnone 	
\f0\b\fs24 \ul 6.1.1. InteliMapBuilder:
\f1\b0 \ulnone  Used for producing GeneratorData scriptable objects that can be used in InteliMapGenerators, which can be used to create AI generated tilemaps. Intended to be used while creating your scene, then removed before release. You can build during runtime, however it is not recommended due to the sometimes long build times.
\f0\b \ul \
\pard\pardeftab720\sl276\slmult1\sa200\partightenfactor0

\f1\b0 \cf0 \ulnone Public Attributes:\
\pard\pardeftab720\li720\fi-360\sl276\slmult1\sa200\partightenfactor0

\fs19 \cf2 int \cf0 epochs 
\fs24 - How many times to analyze the build maps. Higher values will result in longer build times and more accurate generation.\

\fs19 \cf2 GeneratorData \cf0 generator 
\fs24 - The generator data to train, leave this empty if you want to create a new generator.\

\fs19 \cf2 int \cf0 neighborhoodRadius 
\fs24 - The size of a tiles 'neighborhood'. A tiles neighborhood is all the nearby tiles that are relevent to deciding what that tile is going to be. Ex. A radius of 1 implies a 3x3 area, a radius of 2 implies a 5x5 area, etc.. The lower this is, the quicker the build will be.\

\fs19 \cf2 List<GeneratorMap> \cf0 buildMaps 
\fs24 - The list of Tilemaps to analyze and build the generator from.\

\fs19 \cf2 GeneratorAdvanced \cf0 generatorSettings 
\fs24 - A collection of all the advanced settings related to the generator for the InteliMapBuilder.
\fs22 \

\fs19 \cf2 TrainingAdvanced \cf0 trainingSettings 
\fs24 - A collection of all the advanced settings related to the training process for the InteliMapBuilder.
\fs22 \

\fs19 \cf2 GeneratorBuildResult \cf0 buildResult 
\fs24 - The result of the most recent build from the builder.
\fs19  
\fs22 \
\pard\pardeftab720\sl276\slmult1\sa200\partightenfactor0

\fs24 \cf0 Public Functions:\
\pard\pardeftab720\li720\fi-360\sl276\slmult1\sa200\partightenfactor0

\fs19 \cf2 void \cf0 CancelBuild() 
\fs24 - Cancels the current build if there is one running. Note that if a generator was already overwritten it can not be retrieved by canceling the build.
\fs22 \

\fs19 \cf2 void \cf0 SaveAndQuitBuild() 
\fs24 - Save and quits the current build if there is one running. It will wait until the end of the current epoch to stop.
\fs22 \

\fs19 \cf2 void \cf0 Build() 
\fs24 - Builds a generator according to the attributes of this builder.
\fs22 \
\pard\pardeftab720\sl276\slmult1\sa200\partightenfactor0
\cf0 \
	
\f0\b\fs24 \ul 6.1.2. InteliMapGenerator:
\f1\b0 \ulnone  Can be used with a GeneratorData scriptable object to create AI generated tilemaps, can be used in the editor or at runtime.\
Public Attributes:\
\pard\pardeftab720\li720\fi-360\sl276\slmult1\sa200\partightenfactor0

\fs19 \cf2 GeneratorData \cf0 generatorData 
\fs24 - All the stored data of the generator. This contains information about it's settings, weights, connectivity, etc..
\fs22 \

\fs19 \cf2 List<Tilemap> \cf0 mapToFill 
\fs24 - The tilemap to fill by generating. Each seperate entry into the list should be a different layer of the map to fill.
\fs22 \

\fs19 \cf2 BoundsInt \cf0 boundsToFill 
\fs24 - The bounds of the given tilemap to fill by generating. Tiles that are already placed in the bounds will be incorporated into the new generation in-place.
\fs22 \

\fs19 \cf2 bool \cf0 generateOnStart 
\fs24 - Wether to start generation upon the scene starting (i.e., on MonoBehaviour.Start).
\fs22 \

\fs19 \cf2 bool \cf0 forceful 
\fs24 - When this is set to true, if the generator encounters an area impossible to generate in, instead of throwing an exception, it will forcefully generate by changing some of the previously set tiles.
\fs22 \

\fs19 \cf2 MultiLayeredMode \cf0 multiLayeredMode 
\fs24 - How this generator will handle existing tiles in a multi-layered tilemap. This setting does not affect single layered tilemaps. Static: if initially that tile exactly fits a unique tile, it will only collapse to that. Additive: may add new tiles on additional layers.
\fs22 \

\fs19 \cf2 UnrecognizedMode \cf0 unrecognizedMode 
\fs24 - How this generator will handle unrecognized tiles. Replace: attempts to replace that tile with one the generator deems valid. Ignore: completely ignores the unrecognized tile and generates around it.
\fs22 \

\fs19 \cf2 float \cf0 temperature 
\fs24 - How 'random' the generation should be. Positive values of this will likely result in more random generation, while negative values may result in more consistent generation.
\fs22 \

\fs19 \cf2 bool \cf0 useTimeout 
\fs24 - If the generation should be aborted if it takes too long. 
\fs22 \

\fs19 \cf2 float \cf0 timeoutSeconds 
\fs24 - How long to wait in seconds until the generation is aborted.
\fs22 \

\fs19 \cf2 bool \cf0 animated 
\fs24 - If this is true, the map will be filled one tile at a time instead of all at once. 
\fs22 \

\fs19 \cf2 float \cf0 tilesPerSecond 
\fs24 - How many tiles will be placed per second if this generator is set to animated.
\fs22 \
\pard\pardeftab720\sl276\slmult1\sa200\partightenfactor0

\fs24 \cf0 Public Functions:\
\pard\pardeftab720\li720\fi-360\sl276\slmult1\sa200\partightenfactor0

\fs19 \cf2 void \cf0 StartGeneration() 
\fs24 - Starts the map generation synchronously. 
\fs22 \

\fs19 \cf2 void \cf0 StartGenerationWithSeed(int seed)\cf2  
\fs24 \cf0 - Starts the map generation with the given seed synchronously.
\fs22 \

\fs19 \cf2 void \cf0 StartGenerationAsync() 
\fs24 - Starts the map generation asynchronously. 
\fs22 \

\fs19 \cf2 void \cf0 StartGenerationAsyncWithSeed(int seed)\cf2  
\fs24 \cf0 - Starts the map generation with the given seeda synchronously.
\fs22 \

\fs19 \cf2 void \cf0 ClearBounds() 
\fs24 - Clears the area of the mapToFill within the boundsToFill.
\fs19  
\fs22 \
\pard\pardeftab720\sl276\slmult1\sa200\partightenfactor0

\f0\b\fs24 \cf0 \ul \ulc0 \
6.2. Side Objects:\
\pard\pardeftab720\sl276\slmult1\sa200\partightenfactor0

\f1\b0 \cf0 \ulnone 	
\f0\b \ul 6.2.1. GeneratorBuildResult:
\f1\b0 \ulnone  An enumerator of the result code of the most recent build from an InteliMapBuilder. 
\f0\b \ul \
\pard\pardeftab720\partightenfactor0

\f1\b0\fs19 \cf2 \ulnone public\cf0  \cf2 enum\cf0  \cf4 GeneratorBuildResult\cf0 \
\{\
    None,\
    InProgress,\
    \
    \cf3 // Warning Messages\cf0 \
    Cancelled,\
\
    \cf3 // Success Messages\cf0 \
    Success,\
\
    \cf3 // Error Messages\cf0 \
    NanError,\
    ZeroMaps,\
    NullMaps,\
    InvalidCommonality\
\}\
\pard\pardeftab720\sl276\slmult1\sa200\partightenfactor0

\fs22 \cf0 \
	
\f0\b\fs24 \ul 6.2.2. DirectionalBools:
\f1\b0 \ulnone  A struct that allows storing four bools that correspond to the four orthogonal directions.\
\pard\pardeftab720\partightenfactor0

\fs19 \cf2 public\cf0  \cf2 struct\cf0  \cf4 DirectionalBools\cf0 \
\{\
	\cf2 public\cf0  \cf4 DirectionalBools\cf0 (\cf2 bool\cf0  top, \cf2 bool\cf0  bottom, \cf2 bool\cf0  left, \cf2 bool\cf0  right) \
\
	\cf2 public\cf0  \cf2 bool\cf0  top;\
	\cf2 public\cf0  \cf2 bool\cf0  bottom;\
	\cf2 public\cf0  \cf2 bool\cf0  left;\
	\cf2 public\cf0  \cf2 bool\cf0  right;\
\}\
\pard\pardeftab720\sl276\slmult1\sa200\partightenfactor0

\fs22 \cf0 \
	
\f0\b\fs24 \ul 6.2.3. GeneratorMap:
\f1\b0 \ulnone  A class used to store a build map for an InteliMapBuilder's buildMaps list.\
Public Attributes:\
\pard\pardeftab720\li720\fi-360\sl276\slmult1\sa200\partightenfactor0

\fs19 \cf2 List<Tilemap> \cf0 mapLayers 
\fs24 - The Tilemap object(s) to open and analyze for the purposes of building the generator. Having multiple entries in this list allows you to make multi-layered tilemaps.
\fs22 \

\fs19 \cf2 float \cf0 commonality 
\fs24 - How 'common' this map should be considered. I.e., make this value low if the map includes rare structures. These values are normalized, meaning the effective commonality of a map is the commonality of that map, divided by the total commonality of all build maps. This feature should be used if you want to make some structures more rare or more common than others, or set to an extremely low value if you want to include some connection information, but don't want to generate those structures.
\fs22 \

\fs19 \cf2 bool \cf0 manualBounds 
\fs24 - Wether to use manually inputted boundaries (this objects bounds property, or to just use the entire tilemap.
\fs22 \

\fs19 \cf2 BoundsInt \cf0 bounds 
\fs24 - The boundaries of the map to analyze for building the generator.
\fs22 \
\pard\pardeftab720\sl276\slmult1\sa200\partightenfactor0
\cf0 \
	
\f0\b\fs24 \ul 6.2.4. GeneratorAdvanced:
\f1\b0 \ulnone  A class used to store all the advanced settings related to the generator for the InteliMapBuilder.\
Public Attributes:\
\pard\pardeftab720\li720\fi-360\sl276\slmult1\sa200\partightenfactor0

\fs19 \cf2 Connectivity \cf0 connectivity 
\fs24 - How to enforce which tiles can connect to which other tiles. Four way connectivity (Connectivity.FourWay) means only the orthogonal connections are enforced, eight way (Connectivity.EightWay) means diagonal connections are also enforced. Hexagonal connectivity (Connectivity.Hexagonal) should be used on hexagonal grids.
\fs22 \

\fs19 \cf2 bool \cf0 interpretEmptyAsTile 
\fs24 - Wether to interpret empty tiles as intentionally empty tiles. If this is true, then empty tiles may be placed during generation; if it is false, then empty tiles will never be placed during generation.
\fs22 \

\fs19 \cf2 bool \cf0 useXPositionAsInput 
\fs24 - Wether to use the x position of a tile as an input for the machine learning model. If this is set to true, the model may learn to associate certain x positions with certain tiles or structures.
\fs22 \

\fs19 \cf2 bool \cf0 useYPositionAsInput 
\fs24 - Wether to use the y position of a tile as an input for the machine learning model. If this is set to true, the model may learn to associate certain ypositions with certain tiles or structures.
\fs22 \

\fs19 \cf2 DirectionalBools \cf0 acknowledgeBounds 
\fs24 - What boundaries of the generation bounds to use as an input during training. This will cause schematics generated with this option set to true to correlate the selected boundaries of the generation with structures that are seen around the selected boundaries.
\fs22 \

\fs19 \cf2 DirectionalBools \cf0 enforceBorderConnectivity 
\fs24 - Wether to enforce what tiles are allowed to be connected to the selected edges of the generation border.
\fs22 \
\pard\pardeftab720\sl276\slmult1\sa200\partightenfactor0
\cf0 \
	
\f0\b\fs24 \ul 6.2.5. TrainingAdvanced:
\f1\b0 \ulnone  A class used to store all the advanced settings related to the training for the InteliMapBuilder.\
Public Attributes:\
\pard\pardeftab720\li720\fi-360\sl276\slmult1\sa200\partightenfactor0

\fs19 \cf2 int \cf0 trainingThreads 
\fs24 - How many threads will be used for the purposes of training the generator. Higher numbers should result in faster training times, each thread essentially trains an epoch concurrently. Note increasing this number is only effective if your system has enough resources for all threads. Set this value to 1 for single threaded training.
\fs22 \

\fs19 \cf2 ThreadPriority \cf0 trainingThreadPriority 
\fs24 - The system priority to use for the training threads. Higher values may increase training speed.
\fs22 \

\fs19 \cf2 float \cf0 startLearningRate 
\fs24 - The starting learning rate of the machine learning model. Higher values may result in faster generation, but going too high may result in unexpected behaviour. This value is logarithmically interpolated with the End Learning Rate throughout the build.
\fs22 \

\fs19 \cf2 float \cf0 endLearningRate 
\fs24 - The ending learning rate of the machine learning model. Higher values may result in faster generation, but going too high may result in unexpected behaviour. This value is logarithmically interpolated with the Start Learning Rate throughout the build.
\fs22 \
\pard\pardeftab720\sl276\slmult1\sa200\partightenfactor0
\cf0 \
	
\f0\b\fs24 \ul 6.2.6. Connectivity:
\f1\b0 \ulnone  An enum dictating how to enforce which tiles can connect to which other tiles. Four way connectivity (Connectivity.FourWay) means only the orthogonal connections are enforced, eight way (Connectivity.EightWay) means diagonal connections are also enforced. Hexagonal connectivity (Connectivity.Hexagonal) should be used on hexagonal grids.
\f0\b\fs40 \ul \
\pard\pardeftab720\sl276\slmult1\partightenfactor0

\f1\b0\fs19 \cf2 \ulnone public\cf0  \cf2 enum\cf0  \cf4 Connectivity\cf0 \
\{\
    FourWay,\
    EightWay,\
    Hexagonal,\
\}
\f0\b\fs40 \ul \
\
\pard\pardeftab720\sl276\slmult1\sa200\partightenfactor0
\cf0 \ulc0 7. Contact Information:
\f1\b0 \ulnone \

\fs24 If you have any questions or inquires please email 
\fs19 intelimapai@gmail.com
\fs24 .\
\pard\pardeftab720\sl276\slmult1\sa200\partightenfactor0

\fs22 \cf0 \
\pard\pardeftab720\sl276\slmult1\sa200\partightenfactor0

\fs24 \cf0 \
\pard\pardeftab720\partightenfactor0

\fs22 \cf0 \
}